<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="FB_Assert" Id="{15f76aa4-3e61-4336-98f8-17a9e5a514b9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_Assert
VAR
	bMultipleLogFlag	: BOOL;
	bAbortAfterFailFlag	: BOOL;
	bAbort				: BOOL;
	nState				: UDINT;
	sInstanceName		: STRING[255];
	sLastInstance		: STRING[255];
	sLastMessage		: STRING[255];
	nLastState			: UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="AbortAfterFail" Id="{5700d4c1-40f8-48e9-a4a2-418d55508862}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC AbortAfterFail : BOOL]]></Declaration>
      <Set Name="Set" Id="{db7e5c23-5410-4964-8fab-532e1cd23de9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.bAbortAfterFailFlag := AbortAfterFail;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="AnyTypeClassToString" Id="{3d65cbc7-8948-4493-a18d-b16dd3d18630}">
      <Declaration><![CDATA[METHOD AnyTypeClassToString : STRING
VAR_INPUT
  AnyTypeClass: __SYSTEM.TYPE_CLASS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE UDINT_TO_INT(AnyTypeClass) OF
    IBaseLibrary.TypeClass.TYPE_BOOL :
        AnyTypeClassToString := 'BOOL';
    IBaseLibrary.TypeClass.TYPE_BIT :
        AnyTypeClassToString := 'BIT';
    IBaseLibrary.TypeClass.TYPE_BYTE :
        AnyTypeClassToString := 'BYTE';
    IBaseLibrary.TypeClass.TYPE_WORD :
        AnyTypeClassToString := 'WORD';
    IBaseLibrary.TypeClass.TYPE_DWORD :
        AnyTypeClassToString := 'DWORD';
    IBaseLibrary.TypeClass.TYPE_LWORD :
        AnyTypeClassToString := 'LWORD';
    IBaseLibrary.TypeClass.TYPE_SINT :
        AnyTypeClassToString := 'SINT';
    IBaseLibrary.TypeClass.TYPE_INT :
        AnyTypeClassToString := 'INT';
    ELSE
        AnyTypeClassToString := 'UNKNOWN';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="AnyValueToHexStr" Id="{07c0b66f-8d7b-4d29-8a6f-bbba36fc826b}">
      <Declaration><![CDATA[METHOD AnyValueToHexStr : STRING(80)
VAR_INPUT
  value: ANY;
END_VAR
VAR
  i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i:=0 TO DINT_TO_INT(value.diSize)-1 DO
  AnyValueToHexStr := CONCAT(BYTE_TO_HEXSTR(value.pValue[i], 2, FALSE), AnyValueToHexStr);
END_FOR
AnyValueToHexStr := CONCAT('0x', AnyValueToHexStr);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualBOOL" Id="{f056821e-d656-4118-83e1-3c2746c0b216}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualBOOL : BOOL
VAR_INPUT
	bExpected	: BOOL;
	bActual		: BOOL;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (bExpected <> bActual) THEN
	PrintFailed(TO_STRING(bActual), TO_STRING(bExpected), '', sMessage, 'BOOL');
	AreEqualBOOL := FALSE;
ELSE
	AreEqualBOOL := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualBYTE" Id="{f2f43b15-34ed-4241-b15d-49f14291821b}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualBYTE : BOOL
VAR_INPUT
	nExpected	: BYTE;
	nActual		: BYTE;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(nActual), 8, FALSE)),
				CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(nExpected), 8, FALSE)),
				'',
				sMessage,
				'BYTE');
	AreEqualBYTE := FALSE;
ELSE
	AreEqualBYTE := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualDINT" Id="{0aa2405e-2e35-4a09-bedd-fbe2e6c30c77}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualDINT : BOOL
VAR_INPUT
	nExpected	: DINT;
	nActual		: DINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'DINT');
	AreEqualDINT := FALSE;
ELSE
	AreEqualDINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualDWORD" Id="{68608921-b325-4cbe-b512-be641b0119e5}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualDWORD : BOOL
VAR_INPUT
	nExpected	: DWORD;
	nActual		: DWORD;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(CONCAT('16#', DWORD_TO_HEXSTR(nActual, 8, FALSE)),
				CONCAT('16#', DWORD_TO_HEXSTR(nExpected, 8, FALSE)),
				'',
				sMessage,
				'DWORD');
	AreEqualDWORD := FALSE;
ELSE
	AreEqualDWORD := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualGUID" Id="{72fbfbee-6351-418d-859a-5ec67c46ddd4}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualGUID : BOOL
VAR_INPUT
	stExpected	: GUID;
	stActual	: GUID;
	sMessage	: STRING(80);
END_VAR
VAR
	nIdx		: BYTE;
	bEqual		: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEqual := TRUE;
bEqual := bEqual AND stExpected.Data1 = stActual.Data1;
bEqual := bEqual AND stExpected.Data2 = stActual.Data2;
bEqual := bEqual AND stExpected.Data3 = stActual.Data3;

FOR nIdx := 0 TO 7 DO
	bEqual := bEqual AND (stExpected.Data4[nIdx] = stActual.Data4[nIdx]);
END_FOR

IF (NOT bEqual) THEN
	PrintFailed('', '', '', sMessage, 'GUID');
	AreEqualGUID := FALSE;
ELSE
	AreEqualGUID := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualHRESULT" Id="{3ed75c52-ac75-4d9d-a1e3-119fd5b80129}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualHRESULT : BOOL
VAR_INPUT
	hResultExp	: hResult;
	hResultAct	: hResult;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (hResultExp <> hResultAct) THEN
	PrintFailed(CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(hResultAct), 8, FALSE)),
				CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(hResultExp), 8, FALSE)),
				'',
				sMessage,
				'HRESULT');
	AreEqualHRESULT := FALSE;
ELSE
	AreEqualHRESULT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualINT" Id="{0c07dc45-8b12-4e39-8e85-e86f82c98a1e}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualINT : BOOL
VAR_INPUT
	nExpected	: INT;
	nActual		: INT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'INT');
	AreEqualINT := FALSE;
ELSE
	AreEqualINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualLINT" Id="{0abf683a-a95a-4536-b9b3-6e8ecff7b4d7}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualLINT : BOOL
VAR_INPUT
	nExpected	: LINT;
	nActual		: LINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'LINT');
	AreEqualLINT := FALSE;
ELSE
	AreEqualLINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualLREAL" Id="{847abb54-575a-45db-9bd2-ce67c5be3bdd}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualLREAL : BOOL
VAR_INPUT
	fExpected	: LREAL;
	fActual		: LREAL;
	fTolerance	: LREAL;
	sMessage	: STRING(80);
END_VAR
VAR
	fbFormatActual		: FB_FormatString;
	fbFormatExpected	: FB_FormatString;
	sFormatOption		: STRING(20);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ABS(fExpected-fActual) > fTolerance) THEN
	IF (fTolerance >= 0.1) THEN
		sFormatOption := '%4.1F';
	ELSIF (fTolerance >= 0.01) THEN
		sFormatOption := '%4.2F';
	ELSIF (fTolerance >= 0.001) THEN
		sFormatOption := '%4.3F';
	ELSIF (fTolerance >= 0.000001) THEN
		sFormatOption := '%4.6F';
	ELSE
		sFormatOption := '%4.9F';
	END_IF

	fbFormatActual(sFormat := sFormatOption, arg1 := F_LREAL(fActual));
	fbFormatExpected(sFormat := sFormatOption, arg1 := F_LREAL(fExpected));

	PrintFailed(fbFormatActual.sOut, fbFormatExpected.sOut, TO_STRING(fTolerance), sMessage, 'LREAL');
	AreEqualLREAL := FALSE;
ELSE
	AreEqualLREAL := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualLTIME" Id="{5c47e67b-5bab-4853-aff0-e50ffefe94b9}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualLTIME : BOOL
VAR_INPUT
	tExpected		: LTIME;
	tActual			: LTIME;
	tTolerance		: LTIME;
	sMessage		: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (tActual < (tExpected - tTolerance)) OR (tActual > (tExpected + tTolerance)) THEN
	PrintFailed(TO_STRING(tActual), TO_STRING(tExpected), TO_STRING(tTolerance), sMessage, 'LTIME');
	AreEqualLTIME := FALSE;
ELSE
	AreEqualLTIME := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualLWORD" Id="{c876b562-3461-4e44-ab41-59b50c05f6de}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualLWORD : BOOL
VAR_INPUT
	nExpected	: LWORD;
	nActual		: LWORD;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(CONCAT('16#', LWORD_TO_HEXSTR(nActual, 16, FALSE)),
				CONCAT('16#', LWORD_TO_HEXSTR(nExpected, 16, FALSE)),
				'',
				sMessage,
				'LWORD');
	AreEqualLWORD := FALSE;
ELSE
	AreEqualLWORD := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualMEM" Id="{cfc6f8b4-5a40-47a0-bec2-aad22528dc12}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualMEM : BOOL
VAR_INPUT
	pExpected	: PVOID;
	pActual		: PVOID;
	nSize		: UDINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MEMCMP(pExpected, pActual, nSize) <> 0) THEN
	PrintFailed('', '', '', sMessage, 'MEM');
	AreEqualMEM := FALSE;
ELSE
	AreEqualMEM := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualREAL" Id="{97d9a76f-366d-48c3-a5be-40ed9272875e}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualREAL : BOOL
VAR_INPUT
	fExpected	: REAL;
	fActual		: REAL;
	fTolerance	: REAL;
	sMessage	: STRING(80);
END_VAR
VAR
	fbFormatActual		: FB_FormatString;
	fbFormatExpected	: FB_FormatString;
	sFormatOption		: STRING(20);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ABS(fExpected-fActual) > fTolerance) THEN
	IF (fTolerance >= 0.1) THEN
		sFormatOption := '%4.1F';
	ELSIF (fTolerance >= 0.01) THEN
		sFormatOption := '%4.2F';
	ELSIF (fTolerance >= 0.001) THEN
		sFormatOption := '%4.3F';
	ELSIF (fTolerance >= 0.000001) THEN
		sFormatOption := '%4.6F';
	ELSE
		sFormatOption := '%4.9F';
	END_IF

	fbFormatActual(sFormat := sFormatOption, arg1 := F_Real(fActual));
	fbFormatExpected(sFormat := sFormatOption, arg1 := F_Real(fExpected));

	PrintFailed(fbFormatActual.sOut, fbFormatExpected.sOut, TO_STRING(fTolerance), sMessage, 'REAL');
	AreEqualREAL := FALSE;
ELSE
	AreEqualREAL := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualSINT" Id="{41c8e07f-09c6-4640-8cd8-d859e5ac0867}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualSINT : BOOL
VAR_INPUT
	nExpected	: SINT;
	nActual		: SINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'SINT');
	AreEqualSINT := FALSE;
ELSE
	AreEqualSINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualSTRING" Id="{ca67352f-f9f7-426d-8cbc-95731e96d8fc}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualSTRING : BOOL
VAR_INPUT
	sExpected	: STRING(255);
	sActual		: STRING(255);
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (sExpected <> sActual) THEN
	PrintFailed(sActual, sExpected, '', sMessage, 'STRING');
	AreEqualSTRING := FALSE;
ELSE
	AreEqualSTRING := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualTIME" Id="{81d7f47c-00a9-42d5-825a-2834491294cc}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualTIME : BOOL
VAR_INPUT
	tExpected		: TIME;
	tActual			: TIME;
	tTolerance		: TIME;
	sMessage		: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (tActual < (tExpected - tTolerance)) OR (tActual > (tExpected + tTolerance)) THEN
	PrintFailed(TO_STRING(tActual), TO_STRING(tExpected), TO_STRING(tTolerance), sMessage, 'TIME');
	AreEqualTIME := FALSE;
ELSE
	AreEqualTIME := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualUDINT" Id="{732f3788-ab9d-41ba-845f-132f690125b8}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualUDINT : BOOL
VAR_INPUT
	nExpected	: UDINT;
	nActual		: UDINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'UDINT');
	AreEqualUDINT := FALSE;
ELSE
	AreEqualUDINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualUINT" Id="{e037142b-7013-4b6a-8a4e-64dd86dccbfe}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualUINT : BOOL
VAR_INPUT
	nExpected	: UINT;
	nActual		: UINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'UINT');
	AreEqualUINT := FALSE;
ELSE
	AreEqualUINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualULINT" Id="{1e5204d5-5b39-4465-92cb-97f7e27f2387}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualULINT : BOOL
VAR_INPUT
	nExpected	: ULINT;
	nActual		: ULINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'ULINT');
	AreEqualULINT := FALSE;
ELSE
	AreEqualULINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualUSINT" Id="{15cd31c3-90a8-4f44-a2fd-3c6952c0e43d}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualUSINT : BOOL
VAR_INPUT
	nExpected	: USINT;
	nActual		: USINT;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(TO_STRING(nActual), TO_STRING(nExpected), '', sMessage, 'USINT');
	AreEqualUSINT := FALSE;
ELSE
	AreEqualUSINT := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AreEqualWORD" Id="{eff4114c-f1a9-45d9-9ea4-0e0cde43e885}">
      <Declaration><![CDATA[METHOD PUBLIC AreEqualWORD : BOOL
VAR_INPUT
	nExpected	: WORD;
	nActual		: WORD;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nExpected <> nActual) THEN
	PrintFailed(CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(nActual), 8, FALSE)),
				CONCAT('16#', DWORD_TO_HEXSTR(TO_DWORD(nExpected), 8, FALSE)),
				'',
				sMessage,
				'WORD');
	AreEqualWORD := FALSE;
ELSE
	AreEqualWORD := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="CHECK_TRUE" Id="{5cf50e75-5100-4dfc-bf41-911cdf216e52}">
      <Declaration><![CDATA[METHOD CHECK_TRUE : BOOL
VAR_INPUT
  actual: BOOL;
  message: STRING(80);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//CHECK_TRUE := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="equal" Id="{2e7d8d8d-f7e4-49ac-ae9e-e7c7da224eaf}">
      <Declaration><![CDATA[METHOD equal : BOOL
VAR_INPUT
  expected: ANY;
  actual: ANY;
  message: STRING(80);
END_VAR
VAR
  i: INT;
  expected_value_str: STRING(80);
  actual_value_str: STRING(80);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[equal := FALSE;
IF expected.TypeClass <> actual.TypeClass THEN
  PrintFailed(
    TO_STRING(actual.TypeClass), 
    TO_STRING(expected.TypeClass), 
    '',
    CONCAT(message, ' Types do not match'), 
    AnyTypeClassToString(expected.TypeClass));
  RETURN;
END_IF
 
// TODO: check for strings if the size is the length size or declared size
IF (expected.diSize <> actual.diSize) THEN
  PrintFailed(
    TO_STRING(actual.diSize), 
    TO_STRING(expected.diSize), 
    '', 
    CONCAT(message, ' Typesizes do not match'), 
    AnyTypeClassToString(expected.TypeClass));
  RETURN;
END_IF
 
// Compare each byte in the ANY-types
FOR i := 0 TO DINT_TO_INT(expected.diSize)-1 BY 1 DO
    IF expected.pValue[i] <> actual.pValue[i] THEN
      // TODO: write a Function for printing the values of the type
      PrintFailed(
        AnyValueToHexStr(actual), 
        AnyValueToHexStr(expected), 
        '', 
        message, 
        AnyTypeClassToString(expected.TypeClass));
      RETURN;
    END_IF
END_FOR
equal := TRUE;
PrintPassed(message);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ee1ac3c0-b8ad-4267-8eb8-624f17450cc2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	sInstanceName : STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sInstanceName := sInstanceName;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsFalse" Id="{2dcbf202-0bda-4dfc-9b26-4631d23e01b9}">
      <Declaration><![CDATA[METHOD PUBLIC IsFalse : BOOL
VAR_INPUT
	bCondition	: BOOL;
	sMessage	: STRING(80);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bCondition THEN
	PrintFailed(BOOL_TO_STRING(bCondition), 'FALSE', '', sMessage, 'BOOL');
	IsFalse := FALSE;
ELSE
	IsFalse := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTrue" Id="{a24d099f-2171-4a34-9862-23bc2588ff25}">
      <Declaration><![CDATA[METHOD PUBLIC IsTrue : BOOL
VAR_INPUT
	bCondition	: BOOL;
	sMessage	: STRING(80);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT bCondition) THEN
	PrintFailed(TO_STRING(bCondition), 'TRUE', '', sMessage, 'BOOL');
	IsTrue := FALSE;
ELSE
	IsTrue := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="MultipleLog" Id="{e65c30a2-36b2-41ac-a5d9-001d4df9c233}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PUBLIC MultipleLog : BOOL]]></Declaration>
      <Set Name="Set" Id="{dc7af215-1524-4c4a-a4eb-5bdf74448dd1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.bMultipleLogFlag := MultipleLog;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="PrintFailed" Id="{6e6507ee-49c1-41b9-8bc2-abb9c4690d90}">
      <Declaration><![CDATA[METHOD PUBLIC PrintFailed
VAR_INPUT
	sActual		: STRING(80);
	sExpected	: STRING(80);
	sTolerance	: STRING(80);
	sMessage	: STRING(80);
	sType		: STRING(20);
END_VAR
VAR
	sState		: STRING(10);
	sString		: STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ((THIS^.sLastMessage <> sMessage) OR (THIS^.nLastState <> THIS^.nState) OR THIS^.bMultipleLogFlag) THEN
	THIS^.sLastInstance := THIS^.sInstanceName;
	THIS^.sLastMessage := sMessage;
	THIS^.nLastState := THIS^.nState;
	
	sString := THIS^.sInstanceName;

	sState := DWORD_TO_HEXSTR(TO_DWORD(THIS^.nState), 4, FALSE);
	
	sString := CONCAT(sString, '; State: 16#');
	sString := CONCAT(sString, sState);
	
	IF (LEN(sType) > 0) THEN
		sString := CONCAT(sString, '; ');
		sString := CONCAT(sString, sType);
	END_IF
	
	IF (LEN(sMessage) > 0) THEN
		sString := CONCAT(sString, '; ');
		sString := CONCAT(sString, sMessage);
	END_IF
	
	IF (LEN(sActual) > 0) THEN
		sString := CONCAT(sString, '; Act: ');
		sString := CONCAT(sString, sActual);
	END_IF
	
	IF (LEN(sExpected) > 0) THEN
		sString := CONCAT(sString, '; Exp: ');
		sString := CONCAT(sString, sExpected);
	END_IF
	
	IF (LEN(sTolerance) > 0) THEN
		sString := CONCAT(sString, '; Tol: ');
		sString := CONCAT(sString, sTolerance);
	END_IF
	
	ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_ERROR, msgFmtStr := 'Failed: %s', strArg := sString);					
				
	IF (THIS^.bAbortAfterFailFlag) THEN
		THIS^.bAbort := TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrintPassed" Id="{808a1a4b-bc04-4e51-86e5-1ecee5e68e57}">
      <Declaration><![CDATA[METHOD PUBLIC PrintPassed
VAR_INPUT
	sMessage	: STRING(80);
END_VAR
VAR
	sState		: STRING(10);
	sString		: STRING(255);	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ((THIS^.sLastMessage <> sMessage) OR (THIS^.nLastState <> THIS^.nState) OR THIS^.bMultipleLogFlag) THEN
	THIS^.sLastInstance := THIS^.sInstanceName;
	THIS^.sLastMessage := sMessage;
	THIS^.nLastState := THIS^.nState;
	
	sString := THIS^.sInstanceName;

	sState := DWORD_TO_HEXSTR(TO_DWORD(THIS^.nState), 4, FALSE);
	
	sString := CONCAT(sString, '; State: 16#');
	sString := CONCAT(sString, sState);
		
	IF (LEN(sMessage) > 0) THEN
		sString := CONCAT(sString, '; ');
		sString := CONCAT(sString, sMessage);
	END_IF
		
	ADSLOGSTR(msgCtrlMask := ADSLOG_MSGTYPE_WARN, msgFmtStr := 'Passed: %s', strArg := sString);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sizes_are_different" Id="{a88eca58-27a9-4260-99a6-8e81f95104da}">
      <Declaration><![CDATA[METHOD sizes_are_different : BOOL
VAR_INPUT
  expected: ANY;
  actual: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sizes_are_different := expected.diSize <> actual.diSize;]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{ee10ca13-1c33-40f8-b4a3-785842067dc4}">
      <Declaration><![CDATA[PROPERTY PUBLIC State : UDINT]]></Declaration>
      <Get Name="Get" Id="{1558654a-c656-4fd9-b9de-f76a8367c689}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := THIS^.nState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{91c7a498-8e32-4a66-9fca-447fc8f67f5c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (THIS^.bAbort) THEN
	THIS^.nState := 16#FFFF;
ELSE
	THIS^.nState := LIMIT(0, State, 16#FFFF);
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="StateMachineError" Id="{e07a0e74-6ef8-4cb4-aa52-682a11581a7b}">
      <Declaration><![CDATA[METHOD PUBLIC StateMachineError : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[PrintFailed('', '', '', 'Invalid State!', 'StateMachine');
THIS^.nState := 16#FFFF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="types_are_different" Id="{6fd6ea47-4c71-4be8-b309-e43ee9f206b4}">
      <Declaration><![CDATA[METHOD types_are_different : BOOL
VAR_INPUT
  expected: ANY;
  actual: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[types_are_different := expected.TypeClass <> actual.TypeClass;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AbortAfterFail.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AnyTypeClassToString">
      <LineId Id="6" Count="16" />
      <LineId Id="26" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AnyValueToHexStr">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualBOOL">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualBYTE">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="1" />
      <LineId Id="18" Count="1" />
      <LineId Id="10" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualDINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualDWORD">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualGUID">
      <LineId Id="3" Count="10" />
      <LineId Id="19" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualHRESULT">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualLINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualLREAL">
      <LineId Id="3" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualLTIME">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualLWORD">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualMEM">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualREAL">
      <LineId Id="3" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualSINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualSTRING">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualTIME">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualUDINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualUINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualULINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualUSINT">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AreEqualWORD">
      <LineId Id="3" Count="1" />
      <LineId Id="6" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.CHECK_TRUE">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.equal">
      <LineId Id="26" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="42" Count="4" />
      <LineId Id="28" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="47" Count="4" />
      <LineId Id="34" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.IsFalse">
      <LineId Id="10" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.IsTrue">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.MultipleLog.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.PrintFailed">
      <LineId Id="5" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="36" Count="32" />
      <LineId Id="32" Count="1" />
      <LineId Id="15" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.PrintPassed">
      <LineId Id="17" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="20" Count="7" />
      <LineId Id="33" Count="4" />
      <LineId Id="53" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.sizes_are_different">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.State.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.StateMachineError">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.types_are_different">
      <LineId Id="8" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>